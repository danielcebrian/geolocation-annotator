/* 
Geolocation Annotator Plugin v1.0 (https://github.com/danielcebrian/geolocation-annotator)
Copyright (C) 2014 Daniel Cebri√°n Robles 
License: https://github.com/danielcebrian/geolocation-annotator/blob/master/License.rst

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
// Generated by CoffeeScript 1.6.3
var _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Annotator.Plugin.Geolocation = (function(_super) {
	__extends(Geolocation, _super);

	function Geolocation() {
		this.pluginSubmit = __bind(this.pluginSubmit, this);
		this.updateViewer = __bind(this.updateViewer, this);
		_ref = Geolocation.__super__.constructor.apply(this, arguments);
		return _ref;
	}

	Geolocation.prototype.field = null;

	Geolocation.prototype.input = null;

	Geolocation.prototype.pluginInit = function() {
		console.log("Geolocation-pluginInit");
		//Check that annotator is working
		if (!Annotator.supported()) {
			return;
		}
		
		//-- Editor
		this.field = this.annotator.editor.addField({
			type: 'checkbox', //options (textarea,input,select,checkbox)
			label: Annotator._t('Add my current location'),
			submit: this.pluginSubmit,
		});
		
		//Set an event to catch the geolocation
		var self = this;
		$(this.field).mouseup(function() {
			self.getCurrentPosition(self); //set the position in the plugin
		});
		
		//-- Viewer
		var newview = this.annotator.viewer.addField({
			load: this.updateViewer,
		});

		return this.input = $(this.field).find(':input');
	};
	
	// New JSON for the database
	Geolocation.prototype.pluginSubmit = function(field, annotation) {
		var geolocation = $(field).find('input:checked').length==1?true:false;
		if(geolocation){
			if (typeof annotation.geolocation=='undefined')
				annotation.geolocation={};
			annotation.geolocation.longitude = this.longitude;
			annotation.geolocation.latitude = this.latitude;
			annotation.geolocation.altitude = this.altitude;
			annotation.geolocation.accuracy = this.accuracy;
			if (typeof this.goterror!='undefined' && this.goterror)
				alert("You want to save your current location. But you did not accept the location in your browser or maybe your browser is not able to use your current location");
			this.publish('newgeolocation', [field, annotation]);
		}
		return annotation.geolocation;
	};
	
		
	// Get the current position
	Geolocation.prototype.getCurrentPosition = function(Geolocation) {
		var options = {
			enableHighAccuracy: true,
			timeout: 5000,
			maximumAge: 0
		};
		function success(pos) {
			Geolocation.longitude = pos.coords.longitude;
			Geolocation.latitude = pos.coords.latitude;
			Geolocation.altitude = pos.coords.altitude;
			Geolocation.accuracy = pos.coords.accuracy;
		};
		function error(err) {
			Geolocation.goterror = true;
			console.warn('ERROR(' + err.code + '): ' + err.message);
		};
		navigator.geolocation.getCurrentPosition(success, error, options);
	}
	
	//Viewer
	Geolocation.prototype.updateViewer = function(field, annotation) {
		$(field).remove();//remove the empty div created by annotator
		var geolocation = typeof annotation.geolocation!='undefined';
		if(geolocation){
			var fieldControl = $(this.annotator.viewer.element.find('.annotator-controls')).parent();
			fieldControl.prepend('<button title="The user annotation location" class="geolocation-viewer-annotator">');
			var geoEl = fieldControl.find('.geolocation-viewer-annotator'),
				self = this;
			geoEl.click(function() {
				fieldControl.append('<div class="map-viewer-annotator">');
				var mapholder = fieldControl.find('.map-viewer-annotator')[0],
					latitude = annotation.geolocation.latitude,
					longitude = annotation.geolocation.longitude;
				self.showPosition(mapholder,latitude,longitude);
			});
			//fix the problem with the annotator-visible class for edit and delete buttons
			geoEl.addClass('annotator-visible');
			setTimeout((function() {
			  return geoEl.removeClass('annotator-visible');
			}), 500);
		}
	};
	
	//template for the design of the Share Plugin
	Geolocation.prototype.showPosition = function(mapholder,latitude,longitude) {
		var latlon=latitude+","+longitude,
			width = parseInt($(mapholder).css('width')),
			height = parseInt($(mapholder).css('height'));
		var img_url="http://maps.googleapis.com/maps/api/staticmap?center="
			+latlon+"&zoom=14&size="+width+"x"+height+"&sensor=false&markers=color:green%7Clabel:G%7C"+latlon;
		mapholder.innerHTML="<img src='"+img_url+"'>";
		mapholder.style.visibility = 'hidden';
		setInterval(function(){
			mapholder.style.visibility = 'visible';
			mapholder.style.width = $(mapholder).find('img').css('width');
		},100);
	}
	
	return Geolocation;

})(Annotator.Plugin);

